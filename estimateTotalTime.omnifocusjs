/* global PlugIn Task Alert */
/* eslint spaced-comment: ["error", "always", { "exceptions": ["{"] }] */
/*{
"type": "action",
"targets": ["omnifocus"],
"author": "Kaitlin Salzke and Ian Rice",
"identifier": "com.KaitlinSalzke.estimateTotalTime2",
"version": "2.0.0",
"description": "Estimates the total time of todays items",
"label": "Estimate Total Time2",
"shortLabel": "Estimate Total Time2",
"image": "deskclock.fill"
}*/

(() => {
  const action = new PlugIn.Action(function (selection, sender) {
    // get today's date
    const today = new Date()

    // build list of tasks to include
    const tasksToInclude = new Set()

    // get tasks due or deferred to today
    const todayTasks = flattenedTasks.filter(task => {
      return (
    task.deferDate !== null && task.deferDate <= today &&
    task.dueDate !== null && task.dueDate.getTime() === today &&
    task.taskStatus !== Task.Status.Dropped &&
    task.taskStatus !== Task.Status.Completed
      )
    })

        if (selection.projects.length > 0) {
      selection.projects.forEach(project => {
        project.flattenedChildren
          .filter(task => !task.hasChildren && task.taskStatus !== Task.Status.Dropped && task.taskStatus !== Task.Status.Completed)
          .forEach(task => tasksToInclude.add(task))
      })
    }


    if (selection.tasks.length > 0) {
      selection.tasks.forEach(task => tasksToInclude.add(task))
    }

    if (selection.tags.length > 0) {
      selection.tags.forEach(tag => tag.remainingTasks.forEach(task => tasksToInclude.add(task)))
    }

    todayTasks.forEach(task => tasksToInclude.add(task))
console.log('todays tasks:' + todayTasks)
    // find tasks with no estimate and calculate total time
    const noEstimate = []
    let totalTime = 0

    tasksToInclude.forEach(task => {
      if (task.estimatedMinutes === null) {
        noEstimate.push(task.name)
      }
      totalTime += task.estimatedMinutes
    })

    // show details
    showEstimatedTimes(totalTime, noEstimate)
  })

  action.validate = function (selection, sender) {
    return true
  }

  return action
})()

function showEstimatedTimes (totalTime, tasksWithNoEstimate) {
  const hours = Math.floor(totalTime / 60)
  const minutes = totalTime % 60

  // build string to show estimate of total time
  const hoursUnit = (hours === 1) ? 'hour' : 'hours'
  const minutesUnit = (minutes === 1) ? 'minute' : 'minutes'
  let timeString
  if (hours === 0) {
    timeString = minutes + ' ' + minutesUnit
  } else if (minutes === 0) {
    timeString = hours + ' ' + hoursUnit
  } else {
    timeString =
      hours + ' ' + hoursUnit + ' and ' + minutes + ' ' + minutesUnit
  }

  let warning
  switch (tasksWithNoEstimate.length) {
    case 0:
      warning = ''
      break
    case 1:
      warning =
        'Note that the following task has no estimate: \u201C' +
        tasksWithNoEstimate[0] +
        '\u201D.'
      break
    case 2:
      warning =
        'Note that the following 2 tasks have no estimate: \u201C' +
        tasksWithNoEstimate[0] +
        '\u201D and \u201C' +
        tasksWithNoEstimate[1] +
        '\u201D.'
      break
    default:
      warning =
        'Note that the following ' +
        tasksWithNoEstimate.length +
        ' tasks have no estimate: '
      tasksWithNoEstimate.forEach(function (item, index, array) {
        if (index !== 0) {
          warning += ', '
        }
        if (index === array.length - 1) {
          warning += 'and '
        }
        warning +=
          '\u201C' +
          item +
          '\u201D'
        if (index === array.length - 1) {
          warning += '.'
        }
      })
  }

  // show result
  const alert = new Alert('Estimated total time: ' + timeString + '.', warning)
  alert.show()
}
